# In your forked catalog: ./tasks/harbor/push.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: push-to-harbor
spec:
  params:
    - name: harbor-domain
      description: The domain of the Harbor registry
      default: "harbor.nid3.com"
    - name: harbor-project
      description: The Harbor project to push the chart to
      default: "shared"
  volumes:
    - name: harbor-credentials-vol
      secret:
        # This MUST match the name of the secret you created with kubectl
        secretName: harbor-credentials 
  steps:
    - name: push-to-harbor
      image: ghcr.io/jenkins-x/jx-boot:3.11.107
      volumeMounts:
        - name: harbor-credentials-vol
          # The key '.dockerconfigjson' from the secret will be mounted as a file named 'config.json'
          # inside this directory. This is exactly what helm/docker expect.
          mountPath: /tekton/home/.docker
      script: |
        #!/usr/bin/env sh
        
        # Source the runtime variables created by the 'jx-variables' step
        source .jx/variables.sh
        # Read the version from the file created by the 'next-version' step
        VERSION=$(cat VERSION)

        echo "Starting push to Harbor for app: ${APP_NAME} version: ${VERSION}"
        
        # Check if APP_NAME or VERSION are empty
        if [ -z "$APP_NAME" ] || [ -z "$VERSION" ]; then
          echo "ERROR: APP_NAME or VERSION is not set. Exiting."
          exit 1
        fi
        
        CHART_PACKAGE_PATH="./charts/${APP_NAME}/${APP_NAME}-${VERSION}.tgz"
        
        # Check if the packaged chart actually exists
        if [ ! -f "$CHART_PACKAGE_PATH" ]; then
          echo "ERROR: Chart package not found at ${CHART_PACKAGE_PATH}!"
          echo "This might be a case where an app has no chart. Skipping."
          exit 0
        fi
        
        HARBOR_CHART_REPO_URL="oci://$(params.harbor-domain)/$(params.harbor-project)"
        
        echo "Logging into Harbor registry at $(params.harbor-domain)..."
        # Assumes a secret named 'harbor-credentials' is mounted by the pipeline
        helm registry login "$(params.harbor-domain)"
        
        echo "Pushing ${CHART_PACKAGE_PATH} to ${HARBOR_CHART_REPO_URL}"
        helm push "${CHART_PACKAGE_PATH}" "${HARBOR_CHART_REPO_URL}"
        
        echo "Successfully pushed chart to Harbor project: $(params.harbor-project)."